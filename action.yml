name: 'Verify Labels in Pull Request '
description: 'It verifies that the pull request has the expected labels'
author: Mauro Alderete
inputs:
  all:
    description: | 
      List of the labels.
      The pull request must be assigned with all of these labels listed.
    required: false
    default: ''
  none:
    description: | 
      List of the labels.
      The pull request must not be assigned with any of these labels listed.
    required: false
    default: ''
  some:
    description: | 
      List of the labels.
      The pull request must be assigned with one or more of these labels listed.
    required: false
    default: ''
  just-one:
    description: | 
      List of the labels.
      The pull request must be assigned only one of these labels listed.
    required: false
    default: ''
  request-review:
    description: | 
      Boolean flag. False by default.
      Should send a request review to notify whether the pull request passed or not this verification.
    required: false
    default: 'false'
  request-review-header:
    description: |
      A string that is attached to the beginning of the review comment.
      Supports GitHub Flavored Markdown.
    required: false
    default: ''
  github-token:
    description: 'The Github token. Only is required if request-review == true.'
    required: false
    default: ''
  pull-request-number:
    description: |
      The pull request number to verify.
      Only is required if this action isn't run on a pull_request event or pull_request_target event.
    required: false
    default: ''
  emit-error-if-verify-fail:
    description: |
      The verification end with an error if the pull request not satisfy the verification.
      If this is enabled and the process end without any issue, then the approved == 'false', action-status == 'END' and action-message contains a description of the reason for the fail.
      By default is true.
    required: false
    default: 'true'
outputs:
  approved:
    description: 'Boolean that indicates if the pull request approved this verification or not.'
    value: ${{ steps.exit.outputs.approved }}
  action-status:
    description: 'Execution status of the action'
    value: ${{ steps.exit.outputs.action-status }}
  action-message:
    description: 'Message associated to the current status of the action'
    value: ${{ steps.exit.outputs.action-message }}
runs:
  using: 'composite'
  steps:
    - name: Validation
      id: validation
      shell: bash
      env:
        GITHUB_EVENT_NAME: '${{ github.event.name }}'
        GITHUB_EVENT_PULL_REQUEST_NUMBER: '${{ github.event.pull_request.number }}'
        INPUTS_ALL: '${{ inputs.all }}'
        INPUTS_JUST_ONE: '${{ inputs.just-one }}'
        INPUTS_NONE: '${{ inputs.none }}'
        INPUTS_PULL_REQUEST_NUMBER: '${{ inputs.pull-reques-number }}'
        INPUTS_REQUEST_REVIEW: '${{ inputs.request-review }}'
        INPUTS_SOME: '${{ inputs.some }}'
      run: |
        #!/bin/sh
        # VALIDATION status
        echo "ACTION_STATUS=VALIDATION" >> $GITHUB_ENV
        echo "ACTION_MESSAGE=" >> $GITHUB_ENV
        echo "VERIFIED=true" >> $GITHUB_ENV

        # Validate pull-request-input
        if [[ "$GITHUB_EVENT_NAME" != 'pull_request' && "$GITHUB_EVENT_NAME" != 'pull_request_target' && "$INPUTS_PULL_REQUEST_NUMBER" == '' ]]; then
          echo "ACTION_MESSAGE=pull-request-number is required because the event "$GITHUB_EVENT_NAME" is not a pull_request or pull_request_target event" >> $GITHUB_ENV;
          exit 1;
        fi

        # Validate github-token
        if [[ $INPUTS_REQUEST_REVIEW == 'true' && '${{ inputs.github-token }}' == "" ]]; then
          echo "ACTION_MESSAGE=github-token is required when request-review is 'true'" >> $GITHUB_ENV;
          exit 1;
        fi

        if [[ "$GITHUB_EVENT_NAME" == 'pull_request' || "$GITHUB_EVENT_NAME" == 'pull_request_target' ]]; then
          echo "PULL_REQUEST_NUMBER=$GITHUB_EVENT_PULL_REQUEST_NUMBER" >> $GITHUB_ENV;
        else
          echo "PULL_REQUEST_NUMBER=$INPUTS_PULL_REQUEST_NUMBER" >> $GITHUB_ENV;
        fi

        ALL_LABELS=$(echo $INPUTS_ALL | sed 's/, /\", \"/g' | awk '{ print "[\""$0"\"]"}')
        NONE_LABELS=$(echo $INPUTS_NONE | sed 's/, /\", \"/g' | awk '{ print "[\""$0"\"]"}')
        SOME_LABELS=$(echo $INPUTS_SOME | sed 's/, /\", \"/g' | awk '{ print "[\""$0"\"]"}')
        JUST_ONE_LABELS=$(echo $INPUTS_JUST_ONE | sed 's/, /\", \"/g' | awk '{ print "[\""$0"\"]"}')

        echo "ALL_LABELS=$ALL_LABELS" >> $GITHUB_ENV
        echo "NONE_LABELS=$NONE_LABELS" >> $GITHUB_ENV
        echo "SOME_LABELS=$SOME_LABELS" >> $GITHUB_ENV
        echo "JUST_ONE_LABELS=$JUST_ONE_LABELS" >> $GITHUB_ENV

    - name: Get labels from pull request
      id: get-labels
      shell: bash
      env:
        GH_TOKEN: '${{ inputs.github-token }}'
      run: |
        #!/bin/sh
        # GET_LABELS_FROM_CONTEXT status
        echo "ACTION_STATUS=GET_LABELS_FROM_CONTEXT" >> $GITHUB_ENV

        # Get labels list from github client by pull request number
        labels=$(gh pr view "$PULL_REQUEST_NUMBER" --json labels | jq '[.labels[].name]' -c)

        # Store the pull request labels found
        echo "LABELS=$(echo $labels)" >> $GITHUB_ENV

    - name: Verify all labels
      if: inputs.all != ''
      id: verify-all
      shell: bash
      run: |
        #!/bin/sh
        # VERIFY_ALL_LABELS status
        echo "ACTION_STATUS=VERIFY_ALL_LABELS" >> $GITHUB_ENV

        itemscount=$(echo $ALL_LABELS | jq .[] | wc -l)

        # Concatenate the current labels list with the 'all labels' list and get duplicated items.
        # If the count of duplicated items is different to the count of items in 'all labels' list, the pull request is not verified.
        # Expected that the count of the items in the result to be equal to the count of items in 'all labels' list.
        all=$(cat <(echo $LABELS | jq .[]) <(echo $ALL_LABELS | jq .[]) | sort | uniq -d | wc -l)
        if [[ $all != $itemscount ]]; then
          echo "VERIFIED=false" >> $GITHUB_ENV;
          echo "ACTION_MESSAGE=Labels are missing. The pull request must have all these labels: $ALL_LABELS" >> $GITHUB_ENV;
        fi

    - name: Verify none labels
      if: inputs.none != ''
      id: verify-none
      shell: bash
      run: |
        #!/bin/sh
        # VERIFY_NONE_LABELS status
        echo "ACTION_STATUS=VERIFY_NONE_LABELS" >> $GITHUB_ENV

        # Concatenate the current labels list with the 'none labels' list and get duplicated items.
        # If there is at least one duplicate item, the pull request is not verified.
        # Expected that the result is empty.
        none=$(cat <(echo $LABELS | jq .[]) <(echo $NONE_LABELS | jq .[]) | sort | uniq -d | wc -l)
        if [[ $none != 0 ]]; then
          echo "VERIFIED=false" >> $GITHUB_ENV;
          echo "ACTION_MESSAGE=Incorrect labels. The pull request must not have any of these labels: $NONE_LABELS" >> $GITHUB_ENV;
        fi

    - name: Verify some labels
      if: inputs.some != ''
      id: verify-some
      shell: bash
      run: |
        #!/bin/sh
        # VERIFY_SOME_LABELS status
        echo "ACTION_STATUS=VERIFY_SOME_LABELS" >> $GITHUB_ENV

        # Concatenate the current labels list with the 'some labels' list and get duplicated items.
        # If there is not any duplicate item, the pull request is not verified.
        # Expected at least one item the 'some labels' list in the result.
        some=$(cat <(echo $LABELS | jq .[]) <(echo $SOME_LABELS | jq .[]) | sort | uniq -d | wc -l)
        if [[ $some == 0 ]]; then
          echo "VERIFIED=false" >> $GITHUB_ENV;
          echo "ACTION_MESSAGE=Missing labels. The pull request must have at least one of these labels: $SOME_LABELS" >> $GITHUB_ENV;
        fi

    - name: Verify just one labels
      if: inputs.just-one != ''
      id: verify-just-one
      shell: bash
      run: |
        #!/bin/sh
        # VERIFY_JUST_ONE_LABELS status
        echo "ACTION_STATUS=VERIFY_JUST_ONE_LABELS" >> $GITHUB_ENV

        # Concatenate the current labels list with the 'just one labels' list and get duplicated items.
        # If there is more of one, or there is not any item duplicated, the pull request is not verified.
        # Expected just one item the 'just one labels' list in the result.
        justone=$(cat <(echo $LABELS | jq .[]) <(echo $JUST_ONE_LABELS | jq .[]) | sort | uniq -d | wc -l)
        if [[ $justone != 1 ]]; then
          echo "VERIFIED=false" >> $GITHUB_ENV;
          echo "ACTION_MESSAGE=Extra labels. The pull request must have just one of these labels: $JUST_ONE_LABELS" >> $GITHUB_ENV;
        fi

    - name: Get the last review written
      if: inputs.request-review == 'true'
      id: get-last-review
      env:
        INPUTS_REQUEST_REVIEW_HEADER: '${{ inputs.request-review-header }}'
        GH_TOKEN: '${{ inputs.github-token }}'
      shell: bash
      run: |
        #!/bin/sh
        # GET_LAST_REVIEW status
        echo "ACTION_STATUS=GET_LAST_REVIEW" >> $GITHUB_ENV

        # Get the last review written for this 'github-action'.
        lastreview=$(gh pr view $PULL_REQUEST_NUMBER --json reviews | jq "[ .reviews[] | select( (.author.login == \"github-actions\") and (.body | startswith(\"$INPUTS_REQUEST_REVIEW_HEADER\") ) ) ] | max_by(.submittedAt)" -c)

        # Initialize the CREATE_REVIEW flag as false by default.
        echo "CREATE_REVIEW=false" >> $GITHUB_ENV

        # If there is not any previous review written, then will send the first review.
        if [[ $lastreview == 'null' ]]; then
          echo "CREATE_REVIEW=true" >> $GITHUB_ENV
          exit 0;
        fi

        # If the last review was APPROVE && the current state is UNAPPROVED then will updating the review is required.
        if [[ $(echo $lastreview | jq '.state') == "\"APPROVED\"" && "$VERIFIED" == "false" ]]; then
          echo "CREATE_REVIEW=true" >> $GITHUB_ENV
          exit 0;
        fi

        # If the last review was UNAPPROVED && the current state is APPROVED then will updating the review is required.
        if [[ $(echo $lastreview | jq '.state') == "\"CHANGES_REQUESTED\"" && "$VERIFIED" == "true" ]]; then
          echo "CREATE_REVIEW=true" >> $GITHUB_ENV
          exit 0;
        fi

    - name: Send approved review
      if: inputs.request-review == 'true' && env.CREATE_REVIEW == 'true' && env.VERIFIED == 'true'
      id: send-approved-review
      env:
        INPUTS_REQUEST_REVIEW_HEADER: '${{ inputs.request-review-header }}'
        GH_TOKEN: '${{ inputs.github-token }}'
      shell: bash
      run: |
        #!/bin/sh
        # SEND_APPROVED_REVIEW status
        echo "ACTION_STATUS=SEND_APPROVED_REVIEW" >> $GITHUB_ENV

        # Get the GitHub repository name to use it in a request.
        GITHUB_REPOSITORY=$(gh repo view --json nameWithOwner | jq .nameWithOwner -c --raw-output)
        # Make body message
        body=$(echo "$INPUTS_REQUEST_REVIEW_HEADER All labels are OK in this pull request" | sed 's/"/\\"/g')

        curl -s -X POST https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PULL_REQUEST_NUMBER/reviews \
        -H "Authorization: token $GH_TOKEN" \
        -d '{"commit_id":"'"$GITHUB_SHA"'","body":"'"$body"'","event":"APPROVE"}'

    - name: Send unapproved review
      if: inputs.request-review == 'true' && env.CREATE_REVIEW == 'true' && env.VERIFIED == 'false'
      id: send-unapproved-review
      env:
        INPUTS_REQUEST_REVIEW_HEADER: '${{ inputs.request-review-header }}'
        GH_TOKEN: '${{ inputs.github-token }}'
      shell: bash
      run: |
        #!/bin/sh
        # SEND_UNAPPROVED_REVIEW status
        echo "ACTION_STATUS=SEND_UNAPPROVED_REVIEW" >> $GITHUB_ENV

        # Get the GitHub repository name to use it in a request.
        GITHUB_REPOSITORY=$(gh repo view --json nameWithOwner | jq .nameWithOwner -c --raw-output)
        # Make body message
        body=$(echo "$INPUTS_REQUEST_REVIEW_HEADER $ACTION_MESSAGE" | sed 's/"/\\"/g')

        curl -s -X POST https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PULL_REQUEST_NUMBER/reviews \
        -H "Authorization: token $GH_TOKEN" \
        -d '{"commit_id": "'"$GITHUB_SHA"'", "body":"'"$body"'", "event":"REQUEST_CHANGES"}'

    - name: End
      id: end
      env:
        INPUTS_EMIT_ERROR_IF_VERIFY_FAIL: ${{ inputs.emit-error-if-verify-fail }}
      shell: bash
      run: |
        #!/bin/sh
        # END status
        echo "ACTION_STATUS=END" >> $GITHUB_ENV

        # Exit with error if the input is enabled and the verify was does not pass.
        if [[ "$VERIFIED" == 'false' && "$INPUTS_EMIT_ERROR_IF_VERIFY_FAIL" == 'true' ]]; then
          exit 1;
        fi

    - name: Exit
      if: always()
      id: exit
      shell: bash
      env:
        GH_TOKEN: '${{ inputs.github-token }}'
      run: |
        #!/bin/sh
        # EXIT internal status

        message=$(echo "$ACTION_MESSAGE" | sed 's/"/\\"/g')
        labels=$(echo "$LABELS" | sed 's/"/\\"/g')
        repourl=$(gh pr view $PULL_REQUEST_NUMBER --json url | jq .url -c --raw-output)
        repotitle=$(gh pr view $PULL_REQUEST_NUMBER --json title | jq .title -c --raw-output)

        # Full outputs with the results.
        echo "approved=$VERIFIED" >> $GITHUB_OUTPUT
        echo "action-status=$ACTION_STATUS" >> $GITHUB_OUTPUT
        echo "action-message=$message" >> $GITHUB_OUTPUT

        # Summary
        echo "[\"approved\": \"$VERIFIED\",\"action-status\": \"$ACTION_STATUS\", \"action-message\": \"$message\"]"
        echo "# Verify resume" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## $(if [[ $VERIFIED == 'true' ]]; then echo ":heavy_check_mark:"; else echo ":x:"; fi) Result" >> $GITHUB_STEP_SUMMARY
        echo "**Approved:** $(if [[ $VERIFIED == 'true' ]]; then echo ":heavy_check_mark:"; else echo ":x:"; fi)" >> $GITHUB_STEP_SUMMARY
        echo "**Send review:** $(if [[ $CREATE_REVIEW == 'true' ]]; then echo ":heavy_check_mark:"; else echo ":heavy_minus_sign:"; fi)" >> $GITHUB_STEP_SUMMARY
        echo "## $(if [[ $ACTION_STATUS == 'END' && $message == '' ]]; then echo ":heavy_check_mark:"; else echo ":x:"; fi) Action status" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** $ACTION_STATUS" >> $GITHUB_STEP_SUMMARY
        echo "**Message:** $message" >> $GITHUB_STEP_SUMMARY
        echo "## Context" >> $GITHUB_STEP_SUMMARY
        echo "**Pull request:** [#$PULL_REQUEST_NUMBER $repotitle]($repourl)" >> $GITHUB_STEP_SUMMARY
        echo "**Labels assigned:** $labels" >> $GITHUB_STEP_SUMMARY

    - name: Exit with error
      if: failure()
      id: exit-with-error
      shell: bash
      run: |
        #!/bin/sh
        # EXIT_WITH_ERROR internal status

        message=$(echo "$ACTION_MESSAGE" | sed 's/"/\\"/g')

        echo "::error ::[\"approved\": \"$VERIFIED\",\"action-status\": \"$ACTION_STATUS\", \"action-message\": \"$message\"]"
        exit 1;

branding:
  icon: 'check-square'
  color: 'orange'